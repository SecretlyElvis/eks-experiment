#!/bin/sh
###########################################
#   T E R R A F O R M   L A U N C H E R   #
# Maintainer:  Daniel Auld, Watercare LTD #
#                                         #
# Script standardizes Terraform execution #
# with command-line arguments.  Designed  #
# for use in Docker containers or via CLI #
###########################################

if [ "$#" -lt 1 ]; then
    echo "
        Usage:
          $0 <Terraform command> <Dir>

	Where:
	   * Terraform command == init|plan|apply|destroy|*
           * Dir == Terraform configuration directory to execute
	
        Example: 
         $0 init aws/"
    exit 0
fi

CMD=${1:---help}
DIR=${2:-"NODIR"}
# RAND=$(head /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w 8 | head -n 1) # not compatible with OS X
PLANFILE="tfplan-current.tfplan"
VARSFILE=""

# Add trailing slash to $DIR if not already there
length=${#DIR}
last_char=${DIR:length-1:1}
[[ $last_char != "/" ]] && DIR="$DIR/"; :

# Include config file in Terraform commands if it exists
if [[ -f "${DIR}config.tfvars" ]]; then
    VARSFILE=" -var-file=$DIR/config.tfvars"
fi

# Uncomment the following lines to enable debugging
# export TF_LOG=TRACE
# export TF_LOG_PATH=./tflog

echo "Execution Start..."
echo "- Terraform command:  $CMD"
echo "- Config directory:  $DIR"
echo ""

case $CMD in
    init)
	terraform init -input=false -backend=true -backend-config=./backend.tfvars $DIR
        ;;

    plan)
	terraform plan ${VARSFILE} -refresh=true -lock=true "-out=${PLANFILE}" $DIR
	;;

    apply)
	terraform apply -auto-approve -lock=true "./${PLANFILE}"
    rm "./${PLANFILE}"
	;;

    destroy)
	terraform destroy ${VARSFILE} -auto-approve -refresh=true -lock=true $DIR
	;;

    *)
        read -p "Are you sure you want to run Terraform with command '$CMD' [Y/N]?" yn
            case $yn in
            [Yy]* ) 
	        terraform $CMD $DIR
		;;
            [Nn]* ) 
		exit
		;;
            * ) echo "Please answer Yes or No.";;
        esac
esac

echo "Complete"
exit 0
